package grappolo

object NameFixture {

    val elements = listOf(
        "alejandro", "alejandor", "alexandro",
        "marlene", "marleny", "malrene",
        "marta", "martha", "mrata",
        "jorge", "jorje",
        "ricardo"
    )

    val expectedClusterSet = setOf(
        setOf(0, 1, 2),
        setOf(3, 4, 5),
        setOf(5, 7, 8),
        setOf(9, 10),
        setOf(11)
    )

    val expectedClusters = setOf(
        setOf("alejandro", "alejandor", "alexandro"),
        setOf("marlene", "marleny", "malrene"),
        setOf("marta", "martha", "mrata"),
        setOf("jorge", "jorje"),
        setOf("ricardo")
    )

    val expectedSimilarities: List<Similarity> = listOf(
        0.11111111111111116, 0.1428571428571429, 0.16666666666666663, 0.19999999999999996, 0.2222222222222222,
        0.2857142857142857, 0.33333333333333337, 0.4285714285714286, 0.6666666666666667, 0.7142857142857143,
        0.7777777777777778, 0.8, 0.8333333333333334, 0.8571428571428572, 0.8888888888888888
    )

    val expectedScores: List<Triple<Index, Index, Similarity>> = listOf(
        Triple(0, 1, 0.8888888888888888), Triple(0, 2, 0.8888888888888888), Triple(0, 3, 0.2222222222222222),
        Triple(0, 4, 0.2222222222222222), Triple(0, 5, 0.2222222222222222), Triple(0, 6, 0.11111111111111116),
        Triple(0, 7, 0.11111111111111116), Triple(0, 8, 0.11111111111111116), Triple(0, 9, 0.11111111111111116),
        Triple(0, 10, 0.11111111111111116), Triple(0, 11, 0.33333333333333337), Triple(1, 0, 0.8888888888888888),
        Triple(1, 2, 0.7777777777777778), Triple(1, 3, 0.2222222222222222), Triple(1, 4, 0.2222222222222222),
        Triple(1, 5, 0.2222222222222222), Triple(1, 6, 0.11111111111111116), Triple(1, 7, 0.11111111111111116),
        Triple(1, 8, 0.11111111111111116), Triple(1, 9, 0.11111111111111116), Triple(1, 10, 0.11111111111111116),
        Triple(1, 11, 0.33333333333333337), Triple(2, 0, 0.8888888888888888), Triple(2, 1, 0.7777777777777778),
        Triple(2, 3, 0.2222222222222222), Triple(2, 4, 0.2222222222222222), Triple(2, 5, 0.2222222222222222),
        Triple(2, 6, 0.11111111111111116), Triple(2, 7, 0.11111111111111116), Triple(2, 8, 0.11111111111111116),
        Triple(2, 11, 0.33333333333333337), Triple(3, 0, 0.2222222222222222), Triple(3, 1, 0.2222222222222222),
        Triple(3, 2, 0.2222222222222222), Triple(3, 4, 0.8571428571428572), Triple(3, 5, 0.8571428571428572),
        Triple(3, 6, 0.4285714285714286), Triple(3, 7, 0.4285714285714286), Triple(3, 8, 0.2857142857142857),
        Triple(3, 9, 0.2857142857142857), Triple(3, 10, 0.2857142857142857), Triple(4, 0, 0.2222222222222222),
        Triple(4, 1, 0.2222222222222222), Triple(4, 2, 0.2222222222222222), Triple(4, 3, 0.8571428571428572),
        Triple(4, 5, 0.7142857142857143), Triple(4, 6, 0.4285714285714286), Triple(4, 7, 0.4285714285714286),
        Triple(4, 8, 0.2857142857142857), Triple(4, 9, 0.2857142857142857), Triple(4, 10, 0.2857142857142857),
        Triple(5, 0, 0.2222222222222222), Triple(5, 1, 0.2222222222222222), Triple(5, 2, 0.2222222222222222),
        Triple(5, 3, 0.8571428571428572), Triple(5, 4, 0.7142857142857143), Triple(5, 6, 0.4285714285714286),
        Triple(5, 7, 0.4285714285714286), Triple(5, 8, 0.2857142857142857), Triple(5, 9, 0.2857142857142857),
        Triple(5, 10, 0.2857142857142857), Triple(6, 0, 0.11111111111111116), Triple(6, 1, 0.11111111111111116),
        Triple(6, 2, 0.11111111111111116), Triple(6, 3, 0.4285714285714286), Triple(6, 4, 0.4285714285714286),
        Triple(6, 5, 0.4285714285714286), Triple(6, 7, 0.8333333333333334), Triple(6, 8, 0.8),
        Triple(6, 9, 0.19999999999999996), Triple(6, 10, 0.19999999999999996), Triple(6, 11, 0.2857142857142857),
        Triple(7, 0, 0.11111111111111116), Triple(7, 1, 0.11111111111111116), Triple(7, 2, 0.11111111111111116),
        Triple(7, 3, 0.4285714285714286), Triple(7, 4, 0.4285714285714286), Triple(7, 5, 0.4285714285714286),
        Triple(7, 6, 0.8333333333333334), Triple(7, 8, 0.6666666666666667), Triple(7, 9, 0.16666666666666663),
        Triple(7, 10, 0.16666666666666663), Triple(7, 11, 0.1428571428571429), Triple(8, 0, 0.11111111111111116),
        Triple(8, 1, 0.11111111111111116), Triple(8, 2, 0.11111111111111116), Triple(8, 3, 0.2857142857142857),
        Triple(8, 4, 0.2857142857142857), Triple(8, 5, 0.2857142857142857), Triple(8, 6, 0.8),
        Triple(8, 7, 0.6666666666666667), Triple(8, 11, 0.1428571428571429), Triple(9, 0, 0.11111111111111116),
        Triple(9, 1, 0.11111111111111116), Triple(9, 3, 0.2857142857142857), Triple(9, 4, 0.2857142857142857),
        Triple(9, 5, 0.2857142857142857), Triple(9, 6, 0.19999999999999996), Triple(9, 7, 0.16666666666666663),
        Triple(9, 10, 0.8), Triple(9, 11, 0.1428571428571429), Triple(10, 0, 0.11111111111111116),
        Triple(10, 1, 0.11111111111111116), Triple(10, 3, 0.2857142857142857), Triple(10, 4, 0.2857142857142857),
        Triple(10, 5, 0.2857142857142857), Triple(10, 6, 0.19999999999999996), Triple(10, 7, 0.16666666666666663),
        Triple(10, 9, 0.8), Triple(10, 11, 0.1428571428571429), Triple(11, 0, 0.33333333333333337),
        Triple(11, 1, 0.33333333333333337), Triple(11, 2, 0.33333333333333337), Triple(11, 6, 0.2857142857142857),
        Triple(11, 7, 0.1428571428571429), Triple(11, 8, 0.1428571428571429), Triple(11, 9, 0.1428571428571429),
        Triple(11, 10, 0.1428571428571429)
    )
}